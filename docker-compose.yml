services:
  api-gateway:
    image: node:18-alpine
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
      - AWS_REGION=us-east-2
      - AWS_S3_BUCKET=mikedevportfolio
      - STORAGE_TYPE=s3
    volumes:
      - api_gateway:/api_gateway
    depends_on:
      postgres:
        condition: service_healthy
      user-api:
        condition: service_started
      # localstack:
  audio-storage-api:
    build:
      context: ./audio-storage-api
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
      - AWS_REGION=us-east-2
      - AWS_S3_BUCKET=mikedevportfolio
      - STORAGE_TYPE=s3
    volumes:
      - audio_storage:/audio_storage
    depends_on:
      postgres:
        condition: service_healthy
      # localstack:
      #   condition: service_healthy

      # audio-storage-ui:
      #   build:
      #     context: ./audio-storage-ui
      #     dockerfile: Dockerfile
      #   ports:
      #     - "3003:3000"
  user-api:
    build:
      context: ./user-api
      dockerfile: Dockerfile
    ports:
      - "7777:7777"
    environment:
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
      - AWS_REGION=us-east-2
      - AWS_S3_BUCKET=mikedevportfolio
      - STORAGE_TYPE=s3
    volumes:
      - user:/user
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  localstack:
    image: localstack/localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - localstack_data:/tmp/localstack
      - "/var/run/docker.sock:/var/run/docker.sock"
      # config-server:
      # eureka-server:
      #   image: springcloud/eureka
      #   ports:
      #     - "8761:8761"
      #   depends_on:
      #     config-server:
      #       condition: service_healthy
      #   environment:
      #     - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      #   healthcheck:
      #     test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      #     interval: 30s
      #     timeout: 10s
      #     retries: 5

volumes:
  api_gateway:
  audio_storage:
  user:
  postgres_data:
  localstack_data:
    # config_server:
    # eureka_server:
