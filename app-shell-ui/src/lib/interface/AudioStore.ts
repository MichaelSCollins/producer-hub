import { QUANTIZE_DIVISIONS } from "@/store/presets";
import { AudioTrack, Channel, Effect, MasterChannel } from "./";

export type AudioStore = {
    projectId: string | null;
    channels: Channel[];
    masterChannel: MasterChannel;
    selectedTrackId: number | null;
    isPlaying: boolean;
    currentTime: number;
    pixelsPerSecond: number;
    viewportWidth: number;
    selectionStart: number | null;
    selectionEnd: number | null;
    bpm: number;
    quantizeDivision: keyof typeof QUANTIZE_DIVISIONS;
    setProjectId: (projectId?: string) => void;
    addChannel: () => void;
    removeChannel: (channelId: string) => void;
    addTrack: (channelId: string, track: Omit<AudioTrack, 'id' | 'channel'>) => void;
    removeTrack: (channelId: string, trackId: number) => void;
    updateTrackPosition: (trackId: number | undefined, channelId: string | undefined, startTime: number) => void;
    setChannelVolume: (channelId: string, volume: number) => void;
    toggleChannelMute: (channelId: string) => void;
    toggleChannelSolo: (channelId: string) => void;
    setIsPlaying: (isPlaying: boolean) => void;
    setCurrentTime: (time: number) => void;
    setSelectedTrack: (trackId: number | null) => void;
    setPixelsPerSecond: (pixels: number) => void;
    setViewportWidth: (width: number) => void;
    zoomToFitProject: () => void;
    zoomIn: () => void;
    zoomOut: () => void;
    zoomToSelection: () => void;
    zoomToPreset: (seconds: number) => void;
    setSelection: (start: number | null, end: number | null) => void;
    setBpm: (bpm: number) => void;
    setQuantizeDivision: (division: keyof typeof QUANTIZE_DIVISIONS) => void;
    quantizeTime: (time: number) => number;
    setMasterVolume: (volume: number) => void;
    toggleMasterMute: () => void;
    addMasterEffect: (type: Effect['type']) => void;
    removeMasterEffect: (effectId?: string) => void;
    updateMasterEffect: (effectId?: string, parameters?: Record<string, number>) => void;
    toggleMasterEffect: (effectId?: string) => void;
};
